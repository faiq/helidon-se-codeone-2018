# This references an OpenJDK container from the
# Docker Hub https://hub.docker.com/_/openjdk/
# Read more about containers on our dev center
# https://devcenter.wercker.com/overview-and-core-concepts/containers/
box: openjdk:8-jdk

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# https://devcenter.wercker.com/development/pipelines/
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # https://devcenter.wercker.com/development/steps/
  steps:
    # https://github.com/wercker/step-maven
    - script:
      name: import
      code: | 
          export _JAVA_OPTIONS=-Djdk.net.URLClassPath.disableClassPathURLCheck=true

    - wercker/maven:
      goals: clean install
      version: 3.5.4

    - wercker/maven:
      goals: package
      version: 3.5.4

push-release:
  steps:
    - script:
        name: prepare
        code: |
            ls -la
            #mv workshop-web /workshop-web
            ls -la 
    - internal/docker-push:
        ports: "8080"
        working-dir: /pipeline/source
        cmd: java -jar target/quickstart-se.jar
        env: "CI=true"
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: https://iad.ocir.io/v2

deploy-to-kubernetes:
    box: python:2.7
    steps:

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/

    # Tell Kubernetes that we're going to wait 60 seconds for the deploy to be successful
    - kubectl:
        name: set deployment timeout
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: patch deployment/get-ip -p '{"spec":{"progressDeadlineSeconds":300}}'

    # Watch the Kubernetes deployment. Once the pods are considered healthy the step will exit 0
    # If they aren't healthy within 60 seconds, it will exit with a non 0 exit code, and cause the run to fail.
    - kubectl:
        name: check deployment status
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: rollout status deployment/get-ip
